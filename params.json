{"name":"MRuby::CLI","tagline":"A utility for setting up a CLI with mruby that compiles binaries to Linux, OS X, and Windows.","body":"# mruby CLI\r\nA utility for setting up a CLI with [mruby](https://www.mruby.org) that compiles binaries to Linux, OS X, and Windows.\r\n\r\n## Prerequisites\r\nYou'll need the following installed and in your `PATH`:\r\n\r\n* [mruby-cli](https://github.com/hone/mruby-cli/releases)\r\n* [Docker](https://docs.docker.com/installation/)\r\n* [Docker Compose](https://docs.docker.com/compose/install/)\r\n\r\nOn Mac OS X and Windows, [Docker Toolbox](https://www.docker.com/toolbox) is the recommended way to install Docker and docker-compose (does not work on windows).\r\n\r\n## Building a CLI app\r\nTo generate a new mruby CLI, there's a `--setup` option.\r\n\r\n```sh\r\n$ mruby-cli --setup <app name>\r\n```\r\n\r\nThis will generate a folder `<app name>` containing a basic skeleton for getting started. Once you're in the folder, you can build all the binaries:\r\n\r\n```sh\r\n$ docker-compose run compile\r\n```\r\n\r\nYou'll be able to find the binaries in the following directories:\r\n\r\n* Linux (64-bit): `mruby/build/x86_64-pc-linux-gnu/bin`\r\n* Linux (32-bit): `mruby/build/i686-pc-linux-gnu/bin`\r\n* OS X (64-bit): `mruby/build/x86_64-apple-darwin14/bin/`\r\n* OS X (32-bit): `mruby/build/i386-apple-darwin14/bin`\r\n* Windows (64-bit): `mruby/build/x86_64-w64-mingw32/bin/`\r\n* Windows (32-bit): `mruby/build/i686-w64-mingw32/bin`\r\n\r\nYou should be able to run the respective binary that's native on your platform. There's a `shell` service that can be used as well. In the example below, `mruby-cli --setup hello_world` was run.\r\n\r\n```sh\r\n$ docker-compose run shell\r\nroot@3da278e931fc:/home/mruby/code# mruby/build/host/bin/hello_world\r\nHello World\r\n```\r\n\r\n## Docker\r\n\r\nEach app will be generated with a Dockerfile that inherits a base image.\r\n\r\nYou can pull the image from docker hub here:\r\nhttps://registry.hub.docker.com/u/hone/mruby-cli/\r\n\r\nThe Dockerfile for the base image is available on github:\r\nhttps://github.com/hone/mruby-cli-docker\r\n\r\n## Hello World\r\n\r\nBuilding the canonical hello world example in mruby-cli is quite simple. The two files of note from the generate skeleton are `mrblib/hello_world.rb` and `mrbgem.rake`. The CLI hooks into the `__main__` method defined here and passes all the arguments as `argv`.\r\n\r\n`mrblib/hello_world.rb`:\r\n```ruby\r\ndef __main__(argv)\r\n  puts \"Hello World\"\r\nend\r\n```\r\n\r\n### Dependencies\r\nThe rubygems equivalent is mrbgems. [mgem-list](https://github.com/mruby/mgem-list) contains a list of mgems you can pull from. By default mruby does not include everything in the kitchen sink like MRI. This means to even get `puts`, we need to include the `mruby-print`. The list of core gems can be found [here](https://github.com/mruby/mruby/tree/master/mrbgems). Adding dependencies is simple, you just need to add a line near the bottom of your `mrbgem.rake` with the two arguments: name and where it comes from.\r\n\r\n`mrbgem.rake`:\r\n```ruby\r\nMRuby::Gem::Specification.new('hello_world') do |spec|\r\n  spec.license = 'MIT'\r\n  spec.author  = 'Terence Lee'\r\n  spec.summary = 'Hello World'\r\n  spec.bins    = ['hello_world']\r\n\r\n  spec.add_dependency 'mruby-print', :core => 'mruby-print'\r\n  spec.add_dependency 'mruby-mtest', :mgem => 'mruby-test'\r\nend\r\n```\r\n### CLI Architecture\r\nThe app is built from two parts a C wrapper in `tools/` and a mruby part in `mrblib/`. The C wrapper is fairly minimal and executes the `__main__` method in mruby and instantiates `ARGV` and passes it to the mruby code. You won't need to touch the C wrapper. The rest of the CLI is written in mruby. You can't have subfolders in `mrblib/` but you can have as many files in `mrblib/`. All these files are precompiled into mruby bytecode The build tool for mruby is written in CRuby (MRI).\r\n\r\n### Testing\r\nBy default, `mruby-cli` generates two kinds of tests: mtest and bintest.\r\n\r\n#### mtest\r\nThese tests are unit tests, are written in mruby, and go in the `test/` directory. It uses the mrbgem [`mruby-mtest`](https://github.com/iij/mruby-mtest). The available methods to be used can be found [here](https://github.com/mruby/mruby/blob/master/test/assert.rb). To run the tests, just execute:\r\n\r\n```sh\r\n$ docker-compose run mtest\r\n```\r\n\r\n#### bintest\r\nThese are integration tests, are written in CRuby (MRI), and go in the `bintest/` directory. It tests the status and output of the host binary inside a docker container. To run them just execute:\r\n\r\n```sh\r\n$ docker-compose run bintest\r\n```\r\n\r\n## Examples\r\n* `mruby-cli` itself is an app generated by `mruby-cli`, so you can explore this repo on how to build one.\r\n* [mjruby](https://github.com/jkutner/mjruby) - replacement for jruby-launcher.\r\n* [mruby-eso-research](https://github.com/hone/mruby-eso-research) - an app for managing crafting research in Elder Scrolls Online. It uses YAML as the data store.\r\n* [nhk-easy-cli](https://github.com/nhk-ruby/nhk-easy-cli) - a command-line client for reading NHK News Web Easy.\r\n\r\n## mruby-cli Development\r\n\r\n### Compile the mruby-cli binaries\r\n\r\nThis app is built as a `mruby-cli` app. To compile the binaries, you **must** type\r\n\r\n```\r\ndocker-compose run compile\r\n```\r\n\r\nand find the binaries in the appropriate directories (`mruby/build/<target>/bin/`).\r\n\r\nThe docker container contains the necessary cross toolchain to compile a binary for each supported target. That's why it is checked before running a rake task if it is run inside a container.\r\n\r\nIndeed, just using `rake compile` will not work out of the box because the main build is designed to compile on a 64-bit Linux host. It could work if you are on a 64-Linux host and you have an cross toolchain equivalent to the one we provide into the docker container.\r\n\r\nThis means that if you want to add a new rake task `my_task`, you need to add it to the `docker-compose.yml` to make it available through `docker-compose run my_task`.\r\n\r\n### Create the releases\r\n\r\nJust type: `docker-compose run release`\r\n\r\nAfter this command finishes, you'll see the releases for each target in the `releases` directory.\r\n\r\n### Create package\r\n\r\nWe can package the ad hoc release as deb, rpm, msi, or dmg for the following\r\nLinux.\r\n\r\nTo create all the package, just type\r\n\r\n```\r\ndocker-compose run package\r\n```\r\n","google":"UA-71954053-1","note":"Don't delete this file! It's used internally to help with page regeneration."}